# Generated by Django 5.2.5 on 2025-08-14 00:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Espaco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('descricao', models.TextField(blank=True, null=True)),
                ('foto', models.ImageField(blank=True, null=True, upload_to='espacos_fotos/')),
                ('tipo', models.CharField(choices=[('campo', 'Campo'), ('churrasqueira', 'Churrasqueira'), ('quiosque', 'Quiosque')], max_length=20)),
                ('capacidade', models.PositiveIntegerField()),
                ('disponivel', models.BooleanField(default=True)),
                ('modelo_de_cobranca', models.CharField(choices=[('hora', 'Por Hora'), ('periodo', 'Por Período')], default='hora', max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='Feriado',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.DateField(unique=True)),
                ('nome', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='MensagemContato',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('telefone', models.CharField(blank=True, max_length=20, null=True)),
                ('assunto', models.CharField(choices=[('Elogio', 'Elogio'), ('Sugestão', 'Sugestão'), ('Reclamação', 'Reclamação'), ('Reservar para evento', 'Reservar para evento')], max_length=150)),
                ('mensagem', models.TextField()),
                ('data_envio', models.DateTimeField(auto_now_add=True)),
                ('lida', models.BooleanField(default=False)),
            ],
            options={
                'verbose_name': 'Mensagem de Contato',
                'verbose_name_plural': 'Mensagens de Contato',
                'ordering': ['-data_envio'],
            },
        ),
        migrations.CreateModel(
            name='Periodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(help_text='Ex: Manhã, Tarde, Dia Inteiro', max_length=50)),
                ('hora_inicio', models.TimeField()),
                ('hora_fim', models.TimeField()),
            ],
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('cpf', models.CharField(max_length=14, unique=True)),
                ('data_nascimento', models.DateField(blank=True, null=True)),
                ('telefone', models.CharField(blank=True, max_length=15, null=True)),
                ('sexo', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Feminino')], max_length=1, null=True)),
                ('cep', models.CharField(blank=True, max_length=9, null=True)),
                ('logradouro', models.CharField(blank=True, max_length=255, null=True)),
                ('numero', models.CharField(blank=True, max_length=20, null=True)),
                ('complemento', models.CharField(blank=True, max_length=100, null=True)),
                ('bairro', models.CharField(blank=True, max_length=100, null=True)),
                ('cidade', models.CharField(blank=True, max_length=100, null=True)),
                ('estado', models.CharField(blank=True, max_length=2, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='BloqueioRecorrente',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Segunda-feira'), (1, 'Terça-feira'), (2, 'Quarta-feira'), (3, 'Quinta-feira'), (4, 'Sexta-feira'), (5, 'Sábado'), (6, 'Domingo'), (7, 'Dias de Semana (Seg-Sex)'), (8, 'Final de Semana (Sáb-Dom)'), (9, 'Segunda a Quinta (Seg-Qui)'), (10, 'Segundas, Quartas e Sextas (Seg-Qua-Sex)'), (11, 'Terças e Quintas (Ter-Qui)')])),
                ('hora_inicio', models.TimeField()),
                ('hora_fim', models.TimeField()),
                ('motivo', models.CharField(blank=True, help_text='Ex: Manutenção semanal, Aula fixa', max_length=255, null=True)),
                ('espaco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bloqueios_recorrentes', to='api.espaco')),
            ],
        ),
        migrations.CreateModel(
            name='Bloqueio',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data_inicio', models.DateTimeField()),
                ('data_fim', models.DateTimeField()),
                ('motivo', models.CharField(blank=True, max_length=255, null=True)),
                ('espaco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bloqueios_data', to='api.espaco')),
            ],
        ),
        migrations.CreateModel(
            name='PrecoPeriodo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Segunda-feira'), (1, 'Terça-feira'), (2, 'Quarta-feira'), (3, 'Quinta-feira'), (4, 'Sexta-feira'), (5, 'Sábado'), (6, 'Domingo'), (7, 'Dias de Semana (Seg-Sex)'), (8, 'Final de Semana (Sáb-Dom)'), (9, 'Segunda a Quinta (Seg-Qui)'), (10, 'Segundas, Quartas e Sextas (Seg-Qua-Sex)'), (11, 'Terças e Quintas (Ter-Qui)')])),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8)),
                ('aplicar_em_feriados', models.BooleanField(default=False, help_text='Marque se este preço deve ser usado em feriados.')),
                ('espaco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regras_preco_periodo', to='api.espaco')),
                ('periodo', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.periodo')),
            ],
        ),
        migrations.CreateModel(
            name='RegraPreco',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dia_semana', models.IntegerField(choices=[(0, 'Segunda-feira'), (1, 'Terça-feira'), (2, 'Quarta-feira'), (3, 'Quinta-feira'), (4, 'Sexta-feira'), (5, 'Sábado'), (6, 'Domingo'), (7, 'Dias de Semana (Seg-Sex)'), (8, 'Final de Semana (Sáb-Dom)'), (9, 'Segunda a Quinta (Seg-Qui)'), (10, 'Segundas, Quartas e Sextas (Seg-Qua-Sex)'), (11, 'Terças e Quintas (Ter-Qui)')])),
                ('hora_inicio', models.TimeField()),
                ('hora_fim', models.TimeField()),
                ('preco', models.DecimalField(decimal_places=2, max_digits=8)),
                ('aplicar_em_feriados', models.BooleanField(default=False, help_text='Marque se este preço deve ser usado em feriados.')),
                ('espaco', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='regras_preco_hora', to='api.espaco')),
            ],
        ),
        migrations.CreateModel(
            name='Reserva',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('codigo_reserva', models.UUIDField(default=uuid.uuid4, editable=False, null=True, unique=True)),
                ('data_inicio', models.DateTimeField()),
                ('data_fim', models.DateTimeField()),
                ('preco_final', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('confirmada', 'Confirmada'), ('pendente', 'Pendente de Pagamento'), ('cancelada', 'Cancelada')], default='pendente', max_length=20)),
                ('data_criacao', models.DateTimeField(auto_now_add=True)),
                ('espaco', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reservas', to='api.espaco')),
                ('usuario', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='reservas_feitas', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
